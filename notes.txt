    // ADD DATA
    router.get('/add', isLoggedIn, async (req, res, next) => {
        const { rows: item } = await db.query('SELECT *, goods.name FROM public."purchaseitems" JOIN public."goods" ON purchaseitems.itemcode = goods.barcode')

        res.render('purchasesPages/add', { user: req.session.user, item: item, currentPage: 'POS - Purchases' });
    });

    

    router.post('/add', isLoggedIn, async (req, res, next) => {
        try {
            const { invoice, time, totalsum, supplier, operator } = req.body

            await db.query('INSERT INTO public."purchases" (invoice, time, totalsum, supplier, operator) VALUES ($1, $2, $3, $4, $5)', [invoice, time, totalsum, supplier, operator])

            res.redirect('/purchase')
        } catch (error) {
            console.log(error)
            res.send(error)
        }
    })

    // EDIT DATA
    router.get('/edit/:invoice', isLoggedIn, async (req, res, next) => {
        const { invoice } = req.params

        const { rows: data } = await db.query('SELECT * FROM public."purchases" WHERE invoice = $1', [invoice])

        res.render('purchasesPages/edit', { user: req.session.user, item: data[0], currentPage: 'POS - Purchases' });
    });

    router.post('/edit/:invoice', isLoggedIn, async (req, res, next) => {
        try {
            const inpoice = req.params.invoice
            const { invoice, time, totalsum, supplier, operator } = req.body

            await db.query('UPDATE public."purchases" SET invoice = $1, time = $2, totalsum = $3, supplier = $4, operator = $5 WHERE invoice = $6', [invoice, time, totalsum, supplier, operator, inpoice])

            res.redirect('/purchase')
        } catch (error) {
            console.log(error)
            res.send(error)
        }
    })

    // DELETE DATA
    router.get('/delete/:invoice', isLoggedIn, async (req, res, next) => {
        try {
            await db.query('DELETE FROM public."purchases" WHERE invoice = $1', [req.params.invoice])

            res.redirect('/purchase');
        } catch (err) {
            console.log(err)
            res.send(err)
        }
    });


     router.get('/datatable', async (req, res) => {
         let params = []

         if (req.query.search.value) {
             params.push(`time ilike '%${req.query.search.value}%'`)
         }

         const limit = req.query.length
         const offset = req.query.start
         const sortBy = req.query.columns[req.query.order[0].column].data
         const sortMode = req.query.order[0].dir

         const total = await db.query(`SELECT COUNT(*) AS total FROM purchases${params.length > 0 ? ` where ${params.join(' or ')}` : ''}`)
         const data = await db.query(`SELECT * FROM purchases${params.length > 0 ? ` where ${params.join(' or ')}` : ''} order by ${sortBy} ${sortMode} limit ${limit} offset ${offset} `)

         const response = {
             "draw": Number(req.query.draw),
             "recordsTotal": total.rows[0].total,
             "recordsFiltered": total.rows[0].total,
             "data": data.rows
         }
         res.json(response)
     });



     const { startdate, enddate } = req.query

            if (startdate != '' & enddate != '') {
                const { rows: purchases } = await db.query('SELECT sum(totalsum) AS total FROM purchases')
                const { rows: sales } = await db.query('SELECT sum(totalsum) AS total FROM sales')
                const { rows: salestotal } = await db.query('SELECT COUNT(*) AS total FROM sales')

                const { rows: totalpurchase } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalpurchases FROM purchases WHERE time BETWEEN $1 AND $2 GROUP BY monthly, forsort ORDER BY forsort")
                const { rows: totalsales } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalsales FROM sales WHERE time BETWEEN $1 AND $2 GROUP BY monthly, forsort ORDER BY forsort")

                let getMonth = []

                for (let i = 0; i < totalpurchase.length; i++) {
                    getMonth.push(totalpurchase[i].monthly)
                }

                let data = totalpurchase.concat(totalsales)
                let newData = {}
                let income = []

                data.forEach(item => {
                    if (newData[item.forsort]) {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : newData[item.forsort].expense, revenue: item.totalsales ? item.totalsales : newData[item.forsort].revenue }
                    } else {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : 0, revenue: item.totalsales ? item.totalsales : 0 }
                    }
                });

                for (const key in newData) {
                    income.push(newData[key])
                }

                res.render('dashboard/home', { user: req.session.user, currentPage: 'POS - Dashboard', purchases, sales, salestotal, currencyFormatter, query: req.query, data: income, moment });
            } else if (startdate) {
                const { rows: purchases } = await db.query('SELECT sum(totalsum) AS total FROM purchases')
                const { rows: sales } = await db.query('SELECT sum(totalsum) AS total FROM sales')
                const { rows: salestotal } = await db.query('SELECT COUNT(*) AS total FROM sales')

                const { rows: totalpurchase } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalpurchases FROM purchases WHERE time >= $1 GROUP BY monthly, forsort ORDER BY forsort", [startdate])
                const { rows: totalsales } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalsales FROM sales WHERE time >= $1 GROUP BY monthly, forsort ORDER BY forsort", [startdate])

                let getMonth = []

                for (let i = 0; i < totalpurchase.length; i++) {
                    getMonth.push(totalpurchase[i].monthly)
                }

                let data = totalpurchase.concat(totalsales)
                let newData = {}
                let income = []

                data.forEach(item => {
                    if (newData[item.forsort]) {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : newData[item.forsort].expense, revenue: item.totalsales ? item.totalsales : newData[item.forsort].revenue }
                    } else {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : 0, revenue: item.totalsales ? item.totalsales : 0 }
                    }
                });

                for (const key in newData) {
                    income.push(newData[key])
                }

                res.render('dashboard/home', { user: req.session.user, currentPage: 'POS - Dashboard', purchases, sales, salestotal, currencyFormatter, query: req.query, data: income, moment });
            } else if (enddate) {
                const { rows: purchases } = await db.query('SELECT sum(totalsum) AS total FROM purchases')
                const { rows: sales } = await db.query('SELECT sum(totalsum) AS total FROM sales')
                const { rows: salestotal } = await db.query('SELECT COUNT(*) AS total FROM sales')

                const { rows: totalpurchase } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalpurchases FROM purchases WHERE time <= $1 GROUP BY monthly, forsort ORDER BY forsort", [enddate])
                const { rows: totalsales } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalsales FROM sales WHERE time <= $1 GROUP BY monthly, forsort ORDER BY forsort", [enddate])

                let getMonth = []

                for (let i = 0; i < totalpurchase.length; i++) {
                    getMonth.push(totalpurchase[i].monthly)
                }

                let data = totalpurchase.concat(totalsales)
                let newData = {}
                let income = []

                data.forEach(item => {
                    if (newData[item.forsort]) {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : newData[item.forsort].expense, revenue: item.totalsales ? item.totalsales : newData[item.forsort].revenue }
                    } else {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : 0, revenue: item.totalsales ? item.totalsales : 0 }
                    }
                });

                for (const key in newData) {
                    income.push(newData[key])
                }

                res.render('dashboard/home', { user: req.session.user, currentPage: 'POS - Dashboard', purchases, sales, salestotal, currencyFormatter, query: req.query, data: income, moment });
            } else {
                const { rows: purchases } = await db.query('SELECT sum(totalsum) AS total FROM purchases')
                const { rows: sales } = await db.query('SELECT sum(totalsum) AS total FROM sales')
                const { rows: salestotal } = await db.query('SELECT COUNT(*) AS total FROM sales')

                const { rows: totalpurchase } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalpurchases FROM purchases GROUP BY monthly, forsort ORDER BY forsort")
                const { rows: totalsales } = await db.query("SELECT to_char(time, 'Mon YY') AS monthly, to_char(time, 'YYMM') AS forsort, sum(totalsum) AS totalsales FROM sales GROUP BY monthly, forsort ORDER BY forsort")

                let getMonth = []

                for (let i = 0; i < totalpurchase.length; i++) {
                    getMonth.push(totalpurchase[i].monthly)
                }

                let data = totalpurchase.concat(totalsales)
                let newData = {}
                let income = []

                data.forEach(item => {
                    if (newData[item.forsort]) {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : newData[item.forsort].expense, revenue: item.totalsales ? item.totalsales : newData[item.forsort].revenue }
                    } else {
                        newData[item.forsort] = { monthly: item.monthly, expense: item.totalpurchases ? item.totalpurchases : 0, revenue: item.totalsales ? item.totalsales : 0 }
                    }
                });

                for (const key in newData) {
                    income.push(newData[key])
                }

                res.render('dashboard/home', { user: req.session.user, currentPage: 'POS - Dashboard', purchases, sales, salestotal, currencyFormatter, query: req.query, data: income, moment });
            }